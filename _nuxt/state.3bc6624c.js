var f=Object.defineProperty;var v=(e,t,n)=>t in e?f(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var w=(e,t,n)=>(v(e,typeof t!="symbol"?t+"":t,n),n);import{p as m}from"./entry.a1ba4f1d.js";const g={};var A;const a=(A=globalThis.crypto)!=null?A:g;class S{constructor(t){w(this,"publicKey");w(this,"_aesKey");this.publicKey=t}async init(){this._aesKey=await p.generateKey()}get aesKey(){if(!this._aesKey)throw new Error("Yet initialized. Have to call init.");return this._aesKey}async encrypt(t){const[n,s]=await p.encrypt(t,this.aesKey);return{dek:await d.encrypt(this.aesKey,this.publicKey),iv:K(s),payload:K(new Uint8Array(n))}}}class x{constructor(t){w(this,"privateKey");this.privateKey=t}async decrypt(t){const n=await d.decrypt(t.dek,this.privateKey);return await p.decrypt(t.payload,n,t.iv)}}var d;(e=>{async function t(){return await a.subtle.generateKey({name:"RSA-OAEP",modulusLength:4096,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-256"},!0,["encrypt","decrypt"])}e.generateKeyPair=t;async function n(r,y){const c=await a.subtle.exportKey("raw",r),o=await a.subtle.encrypt({name:"RSA-OAEP"},y,c);return K(new Uint8Array(o))}e.encrypt=n;async function s(r,y){const c=l(r),o=await a.subtle.decrypt({name:"RSA-OAEP"},y,c);return await p.importKeyFrom(new Uint8Array(o))}e.decrypt=s;async function i(r){return await a.subtle.exportKey("jwk",r)}e.exportKeyAsJwk=i;async function u(r){r.key_ops&&r.key_ops.length;const y=r.key_ops;return await a.subtle.importKey("jwk",r,{name:"RSA-OAEP",hash:"SHA-256"},!0,y)}e.importKeyFromJwk=u})(d||(d={}));var p;(e=>{async function t(){return await a.subtle.generateKey({name:"AES-CBC",length:256},!0,["encrypt","decrypt"])}e.generateKey=t;async function n(r){return new Uint8Array(await a.subtle.exportKey("raw",r))}e.exportKeyAsBytes=n;async function s(r){return await a.subtle.importKey("raw",r,"AES-CBC",!0,["encrypt","decrypt"])}e.importKeyFrom=s;async function i(r,y){const c=a.getRandomValues(new Uint8Array(16));return[await a.subtle.encrypt({name:"AES-CBC",iv:c},y,r),c]}e.encrypt=i;async function u(r,y,c){const o=l(r),b=l(c),h=await a.subtle.decrypt({name:"AES-CBC",iv:b},y,o);return new Uint8Array(h)}e.decrypt=u})(p||(p={}));function K(e){return btoa([...e].map(t=>String.fromCharCode(t)).join(""))}function l(e){const n=[...atob(e)].map(s=>s.charCodeAt(0));return new Uint8Array(n)}const C=()=>{const e=new Array,t=m("applications",()=>e);return{apps:t,addNewApp:async(s,i)=>{const u=await d.importKeyFromJwk(JSON.parse(i)),r=new S(u);await r.init();const y=new TextEncoder().encode(s.sensitive_data),c=await r.encrypt(y);s.sensitive_data=c,t.value.push(s)}}},_=()=>{const e={privateKey:"",publicKey:""};return m("keyPair",()=>e)};export{x as D,d as K,_ as a,C as u};
